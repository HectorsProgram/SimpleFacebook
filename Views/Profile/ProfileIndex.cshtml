@{
    ViewData["Title"] = "Profile";
    ViewData["ReturnAction"] = "ProfileIndex";
    ViewData["ReturnController"] = "Profile";
    var ownerPosts = Model.ProfileOwnerPosts;
    var profileOwnerId = Model.ProfileOwnerId;
    var firstPost = ownerPosts?.FirstOrDefault().Post;
    var profilePic = firstPost?.User?.ProfilePicturePath ?? "/images/default.png";
    var userName = firstPost?.User?.Username ?? "User";
    var firstName = firstPost?.User?.FirstName ?? "User";
    var lastName = firstPost?.User?.LastName ?? "User";

}

    <script src="~/js/profile/friendResponse.js"></script>
    <script src="~/js/profile/friends.js"></script>
    <script src="~/js/profile/editProfile.js"></script>
    
@model SimpleFacebook.Models.UserProfileViewModel


<div>
    <!-- Cover Photo Area -->
    <div class="position-relative mb-4" style="background-color: #e9ecef; height: 220px; border-radius: 8px;">
        <button class="btn btn-light position-absolute end-0 mt-3 me-3">Edit Cover Photo</button>
        <div class="bg-primary text-white">Cover Box</div>
        <div class="bg-secondary text-white">Padding Box</div>
        <!-- Profile Info Row -->
        <div class="position-absolute start-0 bottom-0 w-100 px-4 pb-3">
            <div class="d-flex align-items-end justify-content-between">
                
                <!-- Profile Picture + Username -->
                <div class="d-flex align-items-center">
                    <!-- Profile Picture -->
                    <div class="rounded-circle border border-3 bg-white overflow-hidden" style="width: 140px; height: 140px; margin-top: 70px;">
                        <img src="@profilePic" alt="Profile Picture" class="img-fluid" style="width: 100%; height: 100%; object-fit: cover;">
                    </div>

                    <!-- Username -->
                    <h2 class="ms-3 mb-0 text-dark">@firstName @lastName</h2>
                </div>

                <!-- Buttons -->
                <div class="d-flex gap-2">
    @if (profileOwnerId == ownerPosts?.FirstOrDefault()?.CurrentUserId)
    {
        <!-- Own profile -->
        <button class="btn btn-outline-secondary btn-sm">Add to Story</button>
        <button class="btn btn-light btn-sm" onclick="loadAndOpenModal()">Edit Profile</button>
        <div id="modalContainer"></div>
    }

    else
    {

        if (Model.IsFriend)
        {
            <div id="friendContainer" data-user-id="@Model.ProfileOwnerId" data-request-id="@Model.FriendshipId"></div>
                
            @* <a asp-action="UnfriendUserProfile"
                asp-route-Id="@Model.ProfileOwnerId"
                asp-route-RequestId="@Model.FriendshipId"
                class="btn btn-Primary btn-sm">
                    Unfriend
            </a> *@

        }
        else if(Model.IsAddedByOwner)
        {
            <div id="responseDiv" style="position: relative; display: inline-block;">
                <button id="respond" onclick="togglePopup()" class="btn btn-primary btn-sm">
                    Respond
                </button>

                <div id="popup" style="
                    display: none;
                    position: absolute;
                    top: 100%;
                    left: 0;
                    margin-top: 4px;
                    padding: 10px;
                    background: white;
                    border: 1px solid #ccc;
                    border-radius: 5px;
                    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
                    z-index: 999;
                ">
                    <button onclick="confirmProfileRequest(@Model.ProfileOwnerId, @Model.FriendshipId)" class="btn btn-success btn-sm">Confirm</button><br />
                    <button onclick="deleteProfileRequest()" class="btn btn-danger btn-sm mt-1">Delete Request</button>
                </div>
            </div>
        @Html.AntiForgeryToken()
        }      
        else{
        <!-- Stranger profile -->
        @*  <form method="post" asp-controller="FriendRequest" asp-action="SendRequest" class="d-inline">
            <input type="hidden" name="receiverId" value="@Model.ProfileUser.Id" />
            <button type="submit" class="btn btn-primary btn-sm">Add Friend</button>
        </form> *@

            <button id="friendBtn"
                    class="btn btn-sm @(Model.IsFriendRequestSent ? "btn-secondary" : "btn-primary")"
                    data-user-id="@Model.ProfileOwnerId"
                    data-status="@(Model.IsFriendRequestSent ? "sent" : "notSent")"
                    onclick="toggleFriendRequest(this)">
                @(Model.IsFriendRequestSent ? "Cancel Request" : "Add Friend")
            </button>

            <script>
                async function toggleFriendRequest(button) {
                    const userId = button.getAttribute("data-user-id");
                    let status = button.getAttribute("data-status");

                    try {
                        const response = await fetch(`/Profile/ToggleRequest/${userId}`, {
                            method: 'POST'
                        });

                        if (!response.ok) throw new Error("Server error");

                        const result = await response.json();
                        if (result.status === "sent") {
                            button.innerText = "Cancel Request";
                            button.classList.remove("btn-primary");
                            button.classList.add("btn-secondary");
                            button.setAttribute("data-status", "sent");
                        } else {
                            button.innerText = "Add Friend";
                            button.classList.remove("btn-secondary");
                            button.classList.add("btn-primary");
                            button.setAttribute("data-status", "notSent");
                        }
                    } catch (err) {
                        alert("Something went wrong.");
                        console.error(err);
                    }
                }
            </script>
        }

        @* <button id="friendBtn" class="btn btn-primary btn-sm" onclick="toggleFriendAppearance(this)">
            Add Friend
        </button>

        <script>
            function toggleFriendAppearance(button) {
                if (button.innerText === "Add Friend") {
                    button.innerText = "Cancel Request";
                    button.classList.remove("btn-primary");
                    button.classList.add("btn-secondary");
                } else {
                    button.innerText = "Add Friend";
                    button.classList.remove("btn-secondary");
                    button.classList.add("btn-primary");
                }
            }
        </script> *@


        <button class="btn btn-outline-primary btn-sm">Message</button>
    }
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <ul class="nav nav-tabs mb-4 justify-content-center">
        <li class="nav-item">
            <a class="nav-link active" href="#">Intro</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">About</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">Friends</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">Photos</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">Videos</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">More</a>
        </li>
    </ul>

    <div class="row">
        <!-- Left Column -->
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-header">Intro</div>
                <div class="card-body">
                    <div class="mb-2 bg-light rounded p-2" style="height: 20px;"></div>
                    <div class="mb-2 bg-light rounded p-2" style="height: 20px;"></div>
                    <div class="mb-2 bg-light rounded p-2" style="height: 20px;"></div>
                </div>
            </div>
            <div class="card mb-3">
                <div class="card-header">Friends <span class="float-end">32,0500</span></div>
                <div class="card-body d-flex flex-wrap gap-2">
                    @for (int i = 0; i < 6; i++)
                    {
                        <div class="bg-light rounded" style="width: 48px; height: 48px;"></div>
                    }
                </div>
            </div>
        </div>
        <!-- Center Column -->
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-header">Photos</div>
                <div class="card-body d-flex flex-wrap gap-2">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="bg-light rounded" style="width: 70px; height: 70px;"></div>
                    }
                </div>
            </div>
<div class="card mb-3">
    <div class="card-header">Posts</div>
    <div class="card-body">
        @if (Model.ProfileOwnerPosts != null && Model.ProfileOwnerPosts.Any())
        {
            foreach (var item in Model.ProfileOwnerPosts)
            {
                @await Html.PartialAsync("_PostWithComments", item)
            }
        }
        else
        {
                        <p class="text-muted">No posts available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
